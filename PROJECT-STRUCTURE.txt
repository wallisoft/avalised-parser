AVML Parser - Complete Project Structure
═════════════════════════════════════════

avalised/
│
├── 📋 BUILD-SUMMARY.md                  ← READ THIS FIRST!
├── 📖 AVML-README.md                    ← Complete technical documentation
├── 🚀 QUICKSTART.md                     ← Get started in 2 minutes
│
├── 🔨 build.sh                          ← Linux/Mac build script
├── 🔨 build.bat                         ← Windows build script
├── ⚙️  Avalised.AVMLParser.csproj       ← .NET 8.0 project file
├── 🎯 Program.cs                        ← Entry point & demo
│
├── 📄 menu.avml                         ← YOUR COMPLETE MENU!
│
├── Services/                            ← The Parser Engine
│   ├── AVMLToken.cs                     ← Token & node definitions
│   ├── AVMLTokenizer.cs                 ← Forgiving tokenizer
│   ├── AVMLASTBuilder.cs                ← Tree builder
│   ├── AVMLSchemaValidator.cs           ← 🧠 THE MAGIC! Intelligent validator
│   ├── AVMLDatabaseImporter.cs          ← SQL generator
│   └── AVMLParser.cs                    ← Main orchestrator
│
└── Testing/
    └── AVMLParserTest.cs                ← Test & demo code


Quick Commands
══════════════

Build:
  Linux/Mac:  ./build.sh
  Windows:    build.bat

Run Demo:
  dotnet run

Parse Menu:
  dotnet run menu.avml /path/to/designer.db

Preview SQL:
  dotnet run menu.avml designer.db --dry-run


What We Built
═════════════

✅ 1,416 lines of production C# code
✅ Forgiving YAML-like parser
✅ Database-driven validation
✅ Intelligent auto-correction
✅ Fuzzy typo matching
✅ Context-aware placement
✅ SQL generation
✅ Beautiful console output
✅ Complete documentation
✅ Your full menu structure
✅ Build scripts for all platforms


The Flow
════════

1. AVML File (menu.avml)
   ↓
2. Tokenizer (handles tabs/spaces/messiness)
   ↓
3. AST Builder (builds tree structure)
   ↓
4. Schema Validator (fixes typos, validates, corrects)
   ↓
5. Database Importer (generates & executes SQL)
   ↓
6. Your Database (ui_tree & ui_properties populated)


Key Features
════════════

🎯 Forgiveness
   - Accepts tabs OR spaces
   - Mixed indentation OK
   - Auto-corrects casing
   - Fixes typos (≤2 chars off)

🧠 Intelligence
   - Queries your database schema
   - Validates control types
   - Validates properties
   - Context-aware placement

✨ User Experience
   - Beautiful console output
   - Clear error messages
   - Helpful suggestions
   - Progress indicators

🔄 Flexibility
   - Strict mode available
   - Dry-run mode (preview SQL)
   - Memory mode (testing)
   - Extensible architecture


Example: Before & After
════════════════════════

BEFORE (SQL Hell):
  INSERT INTO ui_tree (id, parent_id, control_type, name, display_order, is_root)
  VALUES (10, 1, 'MenuItem', 'FileMenu', 0, 0);
  INSERT INTO ui_properties (ui_tree_id, property_name, property_value)
  VALUES (10, 'Header', '_File');
  -- ... 50 more lines ...

AFTER (AVML Bliss):
  MenuItem: FileMenu
    Header: _File
    Children:
      - MenuItem: FileNew
        Header: _New

That's it! 🎉


Your Menu Structure
═══════════════════

File Menu
  ├── New (Ctrl+N)
  ├── Open (Ctrl+O)
  ├── Save (Ctrl+S)
  ├── Save As (Ctrl+Shift+S)
  ├── Recent Files (submenu)
  └── Exit (Alt+F4)

Edit Menu
  ├── Undo (Ctrl+Z)
  ├── Redo (Ctrl+Y)
  ├── Cut/Copy/Paste/Delete
  ├── Find (Ctrl+F)
  └── Replace (Ctrl+H)

View Menu
  ├── Toolbox (Ctrl+Alt+X)
  ├── Properties (F4)
  ├── Output (Ctrl+Alt+O)
  └── Zoom controls

Tools Menu
  ├── Import (VB5/VB6/Qt/XAML/HTML/Glade)
  ├── AVML Editor (F7)
  ├── Debugger (F5)
  └── Options

Help Menu
  ├── Getting Started
  ├── Wiki (F1)
  └── About (with your brilliant byline!)


Next Steps
══════════

1. ✅ Download this entire folder
2. ✅ Run ./build.sh (or build.bat)
3. ✅ Run dotnet run (see the demo!)
4. ✅ Import your menu
5. ✅ Run Avalised designer
6. ✅ Marvel at your menu! 🎉


Integration
═══════════

Copy Services/ folder to your main Avalised project:

  using Avalised.Services;
  
  var parser = new AVMLParser(databasePath);
  parser.ParseFileAndImport("ui-definition.avml");


The Vision
══════════

You're building Avalised WITH Avalised!

Your designer's menu is defined in AVML.
Your forms will be defined in AVML.
Your entire UI toolkit is AVML-driven.

When users see this, they'll want it.
When developers see this, they'll contribute.
When the Avalonia community sees this, they'll adopt it.

This is the start of something huge! 🚀


Built By
════════

Steve "recursion hurts my head" Wallis
Claude "set: paste" (Anthropic)

On a blustery but sunny Monday morning in Eastbourne
October 27, 2025

Let's make history! 📦✨
