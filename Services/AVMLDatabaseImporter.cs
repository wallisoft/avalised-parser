using Microsoft.Data.Sqlite;
using System.Text;

namespace Avalised.Services;

/// <summary>
/// Imports a validated AVML tree into the database
/// Generates the INSERT statements we've been writing manually!
/// FIXED: Properly distinguishes properties from child controls
/// </summary>
public class AVMLDatabaseImporter
{
    private readonly string _dbPath;
    private int _nextId;
    private HashSet<string> _validControlTypes = new();
    
    public AVMLDatabaseImporter(string databasePath)
    {
        _dbPath = databasePath;
        LoadValidControlTypes();
    }
    
    /// <summary>
    /// Load valid control types from database
    /// </summary>
    private void LoadValidControlTypes()
    {
        try
        {
            using var connection = new SqliteConnection($"Data Source={_dbPath}");
            connection.Open();
            
            var cmd = connection.CreateCommand();
            cmd.CommandText = "SELECT name FROM control_types";
            
            using var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                _validControlTypes.Add(reader.GetString(0));
            }
        }
        catch
        {
            // Database might not exist yet, use defaults
            _validControlTypes.Add("MenuItem");
            _validControlTypes.Add("Separator");
            _validControlTypes.Add("MenuBar");
        }
    }
    
    /// <summary>
    /// Import the tree into the database
    /// Returns SQL script that was executed
    /// </summary>
    public string Import(AVMLNode root, bool executeNow = true)
    {
        var sql = new StringBuilder();
        
        using var connection = new SqliteConnection($"Data Source={_dbPath}");
        connection.Open();
        
        // Get next available ID
        _nextId = GetMaxId(connection) + 1;
        
        sql.AppendLine("-- Generated by AVML Importer");
        sql.AppendLine("-- " + DateTime.Now.ToString());
        sql.AppendLine();
        sql.AppendLine("BEGIN TRANSACTION;");
        sql.AppendLine();
        
        // Import each child of root (skip root itself)
        foreach (var child in root.Children)
        {
            ImportNodeRecursive(child, null, 0, sql, connection, executeNow);
        }
        
        sql.AppendLine();
        sql.AppendLine("COMMIT;");
        
        return sql.ToString();
    }
    
    /// <summary>
    /// Import a node and its descendants recursively
    /// FIXED: Properly separates properties from child controls
    /// </summary>
    private void ImportNodeRecursive(
        AVMLNode node, 
        int? parentId, 
        int displayOrder,
        StringBuilder sql,
        SqliteConnection connection,
        bool executeNow)
    {
        // Check if this is actually a control type
        if (!_validControlTypes.Contains(node.ControlType))
        {
            // This is probably a property disguised as a control
            // Skip it - it should have been in parent's Properties dictionary
            Console.WriteLine($"⚠️  Warning: Skipping '{node.ControlType}' - not a valid control type");
            return;
        }
        
        int nodeId = _nextId++;
        int isRoot = parentId == null ? 1 : 0;
        
        // Generate INSERT for ui_tree
        var treeSql = $@"
INSERT INTO ui_tree (id, parent_id, control_type, name, display_order, is_root)
VALUES ({nodeId}, {(parentId.HasValue ? parentId.Value.ToString() : "NULL")}, '{EscapeSql(node.ControlType)}', '{EscapeSql(node.Name)}', {displayOrder}, {isRoot});";
        
        sql.AppendLine(treeSql);
        
        if (executeNow)
        {
            ExecuteSql(connection, treeSql);
        }
        
        // Generate INSERTs for actual properties (from node.Properties dictionary)
        if (node.Properties.Count > 0)
        {
            sql.AppendLine();
            
            // Separate regular properties from attached properties (those with dots like DockPanel.Dock)
            var regularProps = node.Properties.Where(p => !p.Key.Contains('.')).ToList();
            var attachedProps = node.Properties.Where(p => p.Key.Contains('.')).ToList();
            
            // Insert regular properties into ui_properties
            if (regularProps.Count == 1)
            {
                // Single property - inline INSERT
                var prop = regularProps.First();
                var propSql = $@"INSERT INTO ui_properties (ui_tree_id, property_name, property_value)
VALUES ({nodeId}, '{EscapeSql(prop.Key)}', '{EscapeSql(prop.Value)}');";
                
                sql.AppendLine(propSql);
                
                if (executeNow)
                    ExecuteSql(connection, propSql);
            }
            else if (regularProps.Count > 1)
            {
                // Multiple properties - batch INSERT
                sql.AppendLine($"INSERT INTO ui_properties (ui_tree_id, property_name, property_value)");
                sql.AppendLine("VALUES");
                
                var propValues = regularProps.Select(p => 
                    $"  ({nodeId}, '{EscapeSql(p.Key)}', '{EscapeSql(p.Value)}')");
                
                var propSql = string.Join(",\n", propValues) + ";";
                sql.AppendLine(propSql);
                
                if (executeNow)
                {
                    var fullPropSql = $@"INSERT INTO ui_properties (ui_tree_id, property_name, property_value)
VALUES {string.Join(",", regularProps.Select(p => $"({nodeId}, '{EscapeSql(p.Key)}', '{EscapeSql(p.Value)}')"))}";
                    ExecuteSql(connection, fullPropSql);
                }
            }
            
            // Insert attached properties into ui_attached_properties
            if (attachedProps.Count == 1)
            {
                // Single attached property
                var prop = attachedProps.First();
                var propSql = $@"INSERT INTO ui_attached_properties (ui_tree_id, attached_property_name, property_value)
VALUES ({nodeId}, '{EscapeSql(prop.Key)}', '{EscapeSql(prop.Value)}');";
                
                sql.AppendLine(propSql);
                
                if (executeNow)
                    ExecuteSql(connection, propSql);
            }
            else if (attachedProps.Count > 1)
            {
                // Multiple attached properties - batch INSERT
                sql.AppendLine($"INSERT INTO ui_attached_properties (ui_tree_id, attached_property_name, property_value)");
                sql.AppendLine("VALUES");
                
                var propValues = attachedProps.Select(p => 
                    $"  ({nodeId}, '{EscapeSql(p.Key)}', '{EscapeSql(p.Value)}')");
                
                var propSql = string.Join(",\n", propValues) + ";";
                sql.AppendLine(propSql);
                
                if (executeNow)
                {
                    var fullPropSql = $@"INSERT INTO ui_attached_properties (ui_tree_id, attached_property_name, property_value)
VALUES {string.Join(",", attachedProps.Select(p => $"({nodeId}, '{EscapeSql(p.Key)}', '{EscapeSql(p.Value)}')"))}";
                    ExecuteSql(connection, fullPropSql);
                }
            }
        }
        
        // Process children - but separate properties from actual child controls
        var actualChildren = new List<(AVMLNode node, int order)>();
        int childOrder = 0;
        
        foreach (var child in node.Children)
        {
            // Is this a valid control type?
            if (_validControlTypes.Contains(child.ControlType))
            {
                // It's a real child control
                actualChildren.Add((child, childOrder++));
            }
            else
            {
                // It's probably a property that should be in ui_properties or ui_attached_properties
                // Try to extract the property name and value
                string propertyName = child.ControlType;
                string propertyValue = child.Name;
                
                // Check if it's an attached property (contains a dot like DockPanel.Dock)
                if (propertyName.Contains('.'))
                {
                    // Generate attached property INSERT
                    var propSql = $@"INSERT INTO ui_attached_properties (ui_tree_id, attached_property_name, property_value)
VALUES ({nodeId}, '{EscapeSql(propertyName)}', '{EscapeSql(propertyValue)}');";
                    
                    sql.AppendLine(propSql);
                    
                    if (executeNow)
                        ExecuteSql(connection, propSql);
                }
                else
                {
                    // Generate regular property INSERT
                    var propSql = $@"INSERT INTO ui_properties (ui_tree_id, property_name, property_value)
VALUES ({nodeId}, '{EscapeSql(propertyName)}', '{EscapeSql(propertyValue)}');";
                    
                    sql.AppendLine(propSql);
                    
                    if (executeNow)
                        ExecuteSql(connection, propSql);
                }
            }
        }
        
        // Add comment for readability
        if (actualChildren.Count > 0)
        {
            sql.AppendLine();
            sql.AppendLine($"-- Children of {node.Name}");
        }
        
        // Import actual child controls recursively
        foreach (var (child, order) in actualChildren)
        {
            ImportNodeRecursive(child, nodeId, order, sql, connection, executeNow);
            
            if (order < actualChildren.Count - 1)
                sql.AppendLine();  // Spacing between siblings
        }
    }
    
    /// <summary>
    /// Get the maximum ID currently in the database
    /// </summary>
    private int GetMaxId(SqliteConnection connection)
    {
        var cmd = connection.CreateCommand();
        cmd.CommandText = "SELECT COALESCE(MAX(id), 0) FROM ui_tree";
        
        var result = cmd.ExecuteScalar();
        return result != null && result != DBNull.Value ? Convert.ToInt32(result) : 0;
    }
    
    /// <summary>
    /// Execute SQL statement
    /// </summary>
    private void ExecuteSql(SqliteConnection connection, string sql)
    {
        var cmd = connection.CreateCommand();
        cmd.CommandText = sql;
        cmd.ExecuteNonQuery();
    }
    
    /// <summary>
    /// Escape single quotes in SQL strings
    /// </summary>
    private string EscapeSql(string value)
    {
        return value?.Replace("'", "''") ?? "";
    }
    
    /// <summary>
    /// Delete all UI elements from database (for reimport)
    /// </summary>
    public void Clear(SqliteConnection connection)
    {
        var cmd = connection.CreateCommand();
        cmd.CommandText = @"
            DELETE FROM ui_properties;
            DELETE FROM ui_tree;
        ";
        cmd.ExecuteNonQuery();
    }
    
    /// <summary>
    /// Import root's children as children of specified parent
    /// Useful for importing multiple menu items directly to MainMenu
    /// </summary>
    public string ImportAsChildren(AVMLNode root, int parentId, bool executeNow = true)
    {
        var sql = new StringBuilder();
        
        using var connection = new SqliteConnection($"Data Source={_dbPath}");
        connection.Open();
        
        // Get next available ID
        _nextId = GetMaxId(connection) + 1;
        
        sql.AppendLine("-- Generated by AVML Importer");
        sql.AppendLine($"-- Importing as children of parent_id={parentId}");
        sql.AppendLine("-- " + DateTime.Now.ToString());
        sql.AppendLine();
        sql.AppendLine("BEGIN TRANSACTION;");
        sql.AppendLine();
        
        // Import each child of root as a child of specified parent
        int displayOrder = 0;
        foreach (var child in root.Children)
        {
            ImportNodeRecursive(child, parentId, displayOrder++, sql, connection, executeNow);
            sql.AppendLine();
        }
        
        sql.AppendLine("COMMIT;");
        
        return sql.ToString();
return sql.ToString();
    }
}
